using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System;

namespace KZNPCPatchers
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "KZNPCPatchers.esp")
                .Run(args);
        }

        public static string Rand (string[] kzId,int seed){
            Random rnd;
            var isDupeName = Settings.Value.SameName;

            //Check name rule
            if(isDupeName){
                rnd = new Random(seed);
            }
            else{ 
                rnd = new Random();
            }
            int index = rnd.Next(kzId.Length);
            return kzId[index];
        }


        public static string KhaRand(float weight,int seed, bool isFemale){

            //Vanilla Khajiit female base id
            string[] f100 = {"0353C7", "01B1D9", "01B1D3"};
            string[] f80 = {"0CE086"};
            string[] f50 = {"01B1D6","0CED00","01B1D0","06C868","0457FA"};
            string[] f30 = {"0CE081"};
            string[] f20 = {"103516"};
            string[] f10 = {"05BF3D"};
            string[] f0 = {"01B1DA"};

            //Vanilla Khajiit male base id
            string[] m100 = {"109A7F", "01B1D5", "0361F3"};
            string[] m80 = {"00CFBD", "03B0E6"};
            string[] m50 = {"03B0E7", "0D37CF", "013298", "01B1DB"};
            string[] m30 = {"01B1CF", "04D12B", "01C195", "01B1D2"};
            string[] m20 = {"0954BF"};
            string[] m10 = {"02ABC2", "089986", "02E3F0"};

            //using same weight for maximum compatibility
            if(isFemale){
                if (weight == 100) return Rand(f100,seed);
                else if (weight >= 80) return Rand(f80,seed);
                else if (weight >= 50) return Rand(f50,seed);
                else if (weight >= 30) return Rand(f30,seed);
                else if (weight >= 20) return Rand(f20,seed);
                else if (weight >= 10) return Rand(f10,seed);
                else return Rand(f0,seed);
            }
            else{
                if (weight == 100) return Rand(m100,seed);
                else if (weight >= 80) return Rand(m80,seed);
                else if (weight >= 50) return Rand(m50,seed);
                else if (weight >= 30) return Rand(m30,seed);
                else if (weight >= 20) return Rand(m20,seed);
                else return Rand(m10,seed);
            }


        }


        public static string AghRand(float weight,int seed, bool isFemale){

            //Vanilla Argonian female base id
            string[] f100 = {"013268"};
            string[] f80 = {"013382","0B878C"};
            string[] f50 = {"056553","01335A","103511"};
            string[] f30 = {"013365"};
            string[] f0 ={"01411A","0457FB"};

            //Vanilla Argonian male base id
            string[] m100 = {"105561", "02E447", "01C3AA", "01360A"};
            string[] m80 = {"01328D"};
            string[] m50 = {"055B40", "055A1C", "103512", "06CD5B", "01B072", "01412F", "0D5046", "01412E"};
            string[] m30 = {"106118", "013284"};
            string[] m20 = {"0BBDA0", "01403E", "03537E"};
            string[] m10 = {"04C735", "0C1A9F"};
            string[] m0 = {"020040", "014130", "0457FE", "0E9DAB"};

            //using same weight for maximum compatibility
            if(isFemale){
                if (weight == 100) return Rand(f100,seed);
                else if (weight >= 80) return Rand(f80,seed);
                else if (weight >= 50) return Rand(f50,seed);
                else if (weight >= 30) return Rand(f30,seed);
                else return Rand(f0,seed);
            }
            else{
                if (weight == 100) return Rand(m100,seed);
                else if (weight >= 80) return Rand(m80,seed);
                else if (weight >= 50) return Rand(m50,seed);
                else if (weight >= 30) return Rand(m30,seed);
                else if (weight >= 20) return Rand(m20,seed);
                else if (weight >= 10) return Rand(m10,seed);
                else return Rand(m0,seed);
            }
        }


        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

             var outputDir = Settings.Value.FacegenOutputDirectory;

            //From Face fixer
            if (Settings.Value.TargetMods.Count == 0)
            {
                System.Console.WriteLine("Must at least specify one target mod in order.");
                return;
            }

            var npcGroups = state.LoadOrder.ListedOrder
                .Select(listing => listing.Mod)
                .NotNull()
                .Select(x => (x.ModKey, x.Npcs))
                .Where(x => x.Npcs.Count > 0 && Settings.Value.TargetMods.Contains(x.ModKey))
                .ToArray();

            System.Console.WriteLine("Files to map to:");
            foreach (var modKey in npcGroups.Select(x => x.ModKey))
            {
                System.Console.WriteLine($"  {modKey}");
            }

            uint count = 0;

            // For every Npc that exists
            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                //For every Npc group in our target mods, in order
                foreach (var npcGroup in npcGroups)
                {

                // If our target mod contains a copy of the npc
                if (!npcGroup.Npcs.TryGetValue(npc.FormKey, out var sourceNpc)) continue;

                if(!(npc.Race.Equals(Skyrim.Race.KhajiitRace) || npc.Race.Equals(Skyrim.Race.ArgonianRace))) continue;
                // if (!npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Female)) continue;

                // Copy in the face bits
                var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);

                System.Console.WriteLine( modifiedNpc.FormKey.IDString() + "   " + modifiedNpc.Weight);

                // Base Source Npc id
                string kzId = "";

                // Seed if using same name
                int seed = 0;

                // Check if female
                bool isFemale = npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Female);

                // Generate seed from name
                if(modifiedNpc.Name != null){
                seed = (int)modifiedNpc.Name.ToString()[0] % 32;
                }

                // Check Race
                if(modifiedNpc.Race.Equals(Skyrim.Race.KhajiitRace)){
                   kzId = KhaRand(modifiedNpc.Weight,seed,isFemale);
                }
                else{
                   kzId = AghRand(modifiedNpc.Weight,seed,isFemale);
                }

                var kz = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().Where(npc => (npc.FormKey.IDString().Equals(kzId))).Select(npc => npc.DeepCopy()).ToArray();

                var kzNpc = kz[0];

                System.Console.WriteLine("Source NPC is " + kzNpc.FormKey.IDString() + " || " + kzNpc.Name + " || " + "isFemale: " + isFemale + " || " + kzNpc.Weight);
                System.Console.WriteLine("Target NPC is " + modifiedNpc.FormKey.IDString()+ " || " + modifiedNpc.Name);
                System.Console.WriteLine("--------");

                //From NPC appreance copier
                //HANDLE FACEGEN HERE
                string kzNifPath = state.DataFolderPath + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + kzNpc.FormKey.ModKey.ToString() + "\\00" + kzNpc.FormKey.IDString() + ".nif";
                string modedNifPath = outputDir + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + modifiedNpc.FormKey.ModKey.ToString() + "\\00" + modifiedNpc.FormKey.IDString() + ".nif";
                if (!File.Exists(kzNifPath))
                {
                    Console.WriteLine("The following Facegen .nif does not exist. If it is within a BSA, please extract it. Patching of this NPC will be skipped.\n{0}", kzNifPath);
                    continue;
                }

                string kzDdsPath = state.DataFolderPath + "\\textures\\actors\\character\\facegendata\\facetint\\" + kzNpc.FormKey.ModKey.ToString() + "\\00" + kzNpc.FormKey.IDString() + ".dds";
                string modedDdsPath = outputDir + "\\textures\\actors\\character\\facegendata\\facetint\\" + modifiedNpc.FormKey.ModKey.ToString() + "\\00" + modifiedNpc.FormKey.IDString() + ".dds";
                if (!File.Exists(kzDdsPath))
                {
                    Console.WriteLine("The following Facegen .dds does not exist. If it is within a BSA, please extract it. Patching of this NPC will be skipped.\n{0}", kzDdsPath);
                    continue;
                }

                // Copy NPC Facegen Nif and Dds from the donor to acceptor NPC

                // first make the output paths if they don't exist
                Directory.CreateDirectory(outputDir + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + modifiedNpc.FormKey.ModKey.ToString());
                Directory.CreateDirectory(outputDir + "\\textures\\actors\\character\\facegendata\\facetint\\" + modifiedNpc.FormKey.ModKey.ToString());

                // then copy the facegen to those paths
                File.Copy(kzNifPath, modedNifPath, true);
                File.Copy(kzDdsPath, modedDdsPath, true);
                // END FACEGEN

                //Race
                modifiedNpc.Race.SetTo(kzNpc.Race.FormKey);

                //Head Texture
                modifiedNpc.HeadTexture.SetTo(kzNpc.HeadTexture.FormKeyNullable);

                //Head Parts
                modifiedNpc.HeadParts.Clear(); 
                foreach (var hp in kzNpc.HeadParts)
                {
                    modifiedNpc.HeadParts.Add(hp);
                }

                //Face Morph
                if (modifiedNpc.FaceMorph != null && kzNpc.FaceMorph != null)
                {
                    modifiedNpc.FaceMorph.Clear();
                    modifiedNpc.FaceMorph.DeepCopyIn(kzNpc.FaceMorph);
                }

                //Face Parts
                if (modifiedNpc.FaceParts != null && kzNpc.FaceParts != null)
                {
                    modifiedNpc.FaceParts.Clear();
                    modifiedNpc.FaceParts.DeepCopyIn(kzNpc.FaceParts);
                }

                //Hair Color
                modifiedNpc.HairColor.SetTo(kzNpc.HairColor.FormKeyNullable);
                
                //Texture Lighting
                modifiedNpc.TextureLighting = kzNpc.TextureLighting;

                //Tint Layers
                modifiedNpc.TintLayers.Clear();
                foreach (var tl in kzNpc.TintLayers)
                {
                    TintLayer newTintLayer = new TintLayer();
                    newTintLayer.DeepCopyIn(tl);
                    modifiedNpc.TintLayers.Add(newTintLayer);
                }

                //Height and Weight
                modifiedNpc.Height = kzNpc.Height;
                modifiedNpc.Weight = kzNpc.Weight;
                count++;
                }
            }

            System.Console.WriteLine($"Patched {count} Npcs");
        }
    }
}



